#pragma kernel CSFilter RESOLUTION_PLUS_ONE D3D11
#pragma kernel CSFilter RESOLUTION_PLUS_ONE
#pragma kernel CSFilter D3D11
#pragma kernel CSFilter
#pragma kernel CSShift

#include "Packages/com.looooong.srp.vxgi/ShaderLibrary/Constants.cginc"

#define FILTER_FACTOR 1.414214

uint DstRes;
Texture3D<half4> Src;
RWTexture3D<half4> Dst;

#if defined(RESOLUTION_PLUS_ONE)
// Apply 3x3x3 Gaussian Kernel
#define FILTER_INDEX_MODIFIER 0u
groupshared uint SharedSrcRG[6][6][6];
groupshared uint SharedSrcBA[6][6][6];
static const uint KernelMap[] = { 0u, 1u, 0u };
static const float KernelWeights[] = {
  1.0 / 64.0,
  2.0 / 64.0,
  4.0 / 64.0,
  8.0 / 64.0
};
#else
// Apply 4x4x4 Gaussian Kernel
#define FILTER_INDEX_MODIFIER 1u
groupshared uint SharedSrcRG[10][10][10];
groupshared uint SharedSrcBA[10][10][10];
static const uint KernelMap[] = { 0u, 1u, 1u, 0u };
static const float KernelWeights[] = {
  1.0 / 512.0,
  3.0 / 512.0,
  9.0 / 512.0,
  27.0 / 512.0
};
#endif

void FilterOutput(uint3 id, half4 color) {
#ifdef D3D11
  if (any(color)) Dst[id] = FILTER_FACTOR * color;
  else if (any(Dst[id])) Dst[id] = 0.0;
#else
  Dst[id] = FILTER_FACTOR * color;
#endif
}

uint3 FilterSharedIndex(uint3 groupId, uint3 index) {
  return mad(1u + FILTER_INDEX_MODIFIER, groupId, index);
}

float FilterWeight(uint3 index) {
  return KernelWeights[KernelMap[index.x] + KernelMap[index.y] + KernelMap[index.z]];
}

half4 LoadColor(uint3 index) {
  uint rg = SharedSrcRG[index.x][index.y][index.z];
  uint ba = SharedSrcBA[index.x][index.y][index.z];

  return half4(
    f16tof32(rg),
    f16tof32(rg >> 16u),
    f16tof32(ba),
    f16tof32(ba >> 16u)
  );
}

void StoreColor(uint3 index, half4 color) {
  SharedSrcRG[index.x][index.y][index.z] = f32tof16(color.r) | (f32tof16(color.g) << 16u);
  SharedSrcBA[index.x][index.y][index.z] = f32tof16(color.b) | (f32tof16(color.a) << 16u);
}

[numthreads(4,4,4)]
void CSFilter(uint3 id : SV_DispatchThreadID, uint3 groupId : SV_GroupThreadId)
{
  uint3 index;
  uint3 minIndex = 1u - (groupId == 0u);
  uint3 maxIndex = 1u + (groupId == 3u) + FILTER_INDEX_MODIFIER;

  [unroll]
  for (index.x = minIndex.x; index.x <= maxIndex.x; index.x++) {
    [unroll]
    for (index.y = minIndex.y; index.y <= maxIndex.y; index.y++) {
      [unroll]
      for (index.z = minIndex.z; index.z <= maxIndex.z; index.z++) {
        StoreColor(FilterSharedIndex(groupId, index), Src[int3(mad(2u, id, index)) - 1]);
      }
    }
  }

  GroupMemoryBarrierWithGroupSync();

#ifdef RESOLUTION_PLUS_ONE
  if (any(id >= DstRes)) return;
#endif

  float4 color = 0.0;

  [unroll]
  for (index.x = 0u; index.x < 3u + FILTER_INDEX_MODIFIER; index.x++) {
    [unroll]
    for (index.y = 0u; index.y < 3u + FILTER_INDEX_MODIFIER; index.y++) {
      [unroll]
      for (index.z = 0u; index.z < 3u + FILTER_INDEX_MODIFIER; index.z++) {
        color += FilterWeight(index) * LoadColor(FilterSharedIndex(groupId, index));
      }
    }
  }

  FilterOutput(id, color);
}

int3 Displacement;

[numthreads(4,4,4)]
void CSShift(uint3 id : SV_DispatchThreadID)
{
  if (any(id >= DstRes)) return;

  id.x = Displacement.x < 0 ? DstRes - 1u - id.x : id.x;
  id.y = Displacement.y < 0 ? DstRes - 1u - id.y : id.y;
  id.z = Displacement.z < 0 ? DstRes - 1u - id.z : id.z;

  Dst[id] = Dst[int3(id) + Displacement];
}
